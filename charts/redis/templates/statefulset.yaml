{{- if gt (int64 .Values.master.count) 0 -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.name }}-statefulset"
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/component: master
spec:
  replicas: {{ .Values.master.replicas }}
  serviceName: "{{ .Values.name }}-headless-service"
  selector:
    matchLabels:
      app.kubernetes.io/component: master
  updateStrategy:
    type: {{ .Values.master.updateStrategy.type }}
    {{- if .Values.master.updateStrategy.rollingUpdate }}
    rollingUpdate:
      partition: {{ .Values.master.updateStrategy.rollingUpdate.partition }}
    {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: master
    spec:
      serviceAccountName: "{{ .Values.name }}-serviceaccount"
      automountServiceAccountToken: {{ .Values.master.serviceAccount.automountServiceAccountToken }}
      {{- if .Values.master.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.master.nodeSelector | nindent 8 }}
      {{- end }}
      containers:
        - name: redis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
          {{- end }}
          ports:
            - name: redis
              containerPort: {{ .Values.master.containerPorts.redis }}
          env:
            - name: REDIS_REPLICATION_MODE
              value: {{.Values.master.replication_mode | quote}}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.name }}-secret"
                  key: redis-password
            - name: REDIS_PORT
              value: {{ .Values.master.containerPorts.redis | quote }}
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: {{ .Values.master.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ add1 .Values.master.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.livenessProbe.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: {{ .Values.master.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ add1 .Values.master.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.readinessProbe.failureThreshold }}
          {{- if .Values.master.resources }}
          resources:
            {{ .Values.master.resources | toYaml | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /usr/local/etc/redis
              subPath: master.conf
      volumes:
        - name: redis-config
          configMap:
            name: "{{ .Values.name }}-configmap"
        - name: redis-data
          persistentVolumeClaim:
            claimName: "{{ .Values.name }}-pvc"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/component: master
    spec:
      accessModes:
      {{- range .Values.master.persistence.accessModes }}
        - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.master.persistence.size | quote }}
      storageClassName: {{ .Values.master.persistence.storageClass }}
      selector:
        matchLabels:
          app.kubernetes.io/component: master
  updateStrategy:
    type: {{ .Values.master.updateStrategy.type }}
    {{- if .Values.master.updateStrategy.rollingUpdate }}
    rollingUpdate:
      partition: {{ .Values.master.updateStrategy.rollingUpdate.partition }}
    {{- end }}
{{- end }}