# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
env: 
  MATRIX: "{\"secret\":[\"ZS_DEVOPS_KEY\",\"PLATFORM_1_KEY\"]}"
jobs:
  
  list-account:
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
        project: ${{ steps.set-project.outputs.project }}
      steps:
        - id: files
          uses: jitterbit/get-changed-files@v1
        - run: |
            for added_modified_file in ${{ steps.files.outputs.all }}; do
            echo ${added_modified_file}
            done

        - id: sort
          run: |
            readarray -td $'\0' sorted < <(
                      for i in ${{ steps.files.outputs.all }};
                      do     printf '%s %s\0' "${#i}" "$i";
                      done |
                              sort -bz -k1,1n -k2|
                              cut -zd " " -f2-
                      )
            echo "files=`echo ${sorted[@]}`" >> "$GITHUB_OUTPUT"
        - id: set-project
          run: |
            cd 
            for added_modified_file in ${{ steps.sort.outputs.files  }}; do
              if [[ $(basename ${added_modified_file}) == 'terragrunt.hcl' ]]; then
              file_name=$(dirname ${added_modified_file} | cut -d'/' -f2)
            fi
            done
            echo "::set-output name=project::$file_name"
        - id: set-matrix
          run: echo "::set-output name=matrix::$MATRIX"

  setup-env:
    
    needs: list-account
    runs-on: ubuntu-latest
    outputs:
      file : ${{ steps.output-file.outputs.file }}
      secret: ${{ steps.output-secret.outputs.secret }}
      project: ${{ steps.output-project.outputs.project }}
      
    strategy:
      matrix: ${{fromJSON(needs.list-account.outputs.matrix)}} 

    env :
      CHANGED_PROJECT: ${{needs.list-account.outputs.project}}

    steps:

      - name: Setup Env
        run: |
          ORIGINAL_SECRET=${{ matrix.secret }}
          TRANSFORMED_SECRET=$(echo "$ORIGINAL_SECRET" | tr '[:upper:]' '[:lower:]' | sed -e 's/_key$//' -e 's/_/-/g')
          echo "PROJECT=$TRANSFORMED_SECRET" >> $GITHUB_ENV
          TRANSFORMED_SECRET="$TRANSFORMED_SECRET.json"
          echo "FILE_NAME=$TRANSFORMED_SECRET" >> $GITHUB_ENV
          echo "SECRET_NAME=${{ matrix.secret }}" >> $GITHUB_ENV
          
      - id: output-secret
        if: ${{ env.PROJECT == env.CHANGED_PROJECT }}
        run: 
          echo "::set-output name=secret::$SECRET_NAME"
      - id: output-project
        if: ${{ env.PROJECT == env.CHANGED_PROJECT }}
        run: 
          echo "::set-output name=project::$PROJECT"
      - id: output-file
        if: ${{ env.PROJECT == env.CHANGED_PROJECT }}
        run: 
          echo "::set-output name=file::$FILE_NAME"
  terragrunt:
      needs: setup-env
      runs-on: ubuntu-latest
      env: 
        PROJECT: ${{ needs.setup-env.outputs.project }}
        FILE_NAME: ${{ needs.setup-env.outputs.file }}
        SECRET_NAME: ${{ needs.setup-env.outputs.secret }}
      steps: 
        - name: Check env
          run: echo "${{env.SECRET_NAME}}"
      
        - name: Setup Creds
          run: | 
            echo '${{ secrets[env.SECRET_NAME] }}' > shared-services.json
            echo '${{ secrets[env.SECRET_NAME] }}' > "${{ env.FILE_NAME }}"
            pwd
            ls
          
 
